# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Unit tests Ubuntu

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/unit-tests-ubuntu.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/unit-tests-ubuntu.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"
  CCACHE_DIR: "${{ github.workspace }}/ccache-cache"
  CCACHE_COMPRESSLEVEL: "13"
  CCACHE_MAXSIZE: "500M"
  JF_ARTIFACTORY_NAME: "modle-ci-conan"

jobs:
  build-project-short:
    runs-on: ubuntu-latest
    needs: build-dependencies-short
    strategy:
      fail-fast: false
      matrix:
        include:
          - { compiler: gcc-8,    os: 'ubuntu-20.04', generator: Ninja, build_type: Debug, developer_mode: OFF }
          - { compiler: gcc-12,   os: 'ubuntu-22.04', generator: Ninja, build_type: Debug, developer_mode: ON }
          - { compiler: clang-8,  os: 'ubuntu-20.04', generator: Ninja, build_type: Debug, developer_mode: OFF }
          - { compiler: clang-14, os: 'ubuntu-22.04', generator: Ninja, build_type: Debug, developer_mode: ON }

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/modle/${{ matrix.os }}-cxx-${{ matrix.compiler }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: |
          os="${{ matrix.os }}"
          compiler="${{ matrix.compiler }}"
          generator="${{ matrix.generator }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/unit-tests-ubuntu.yml') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          echo "::set-output name=key::$os-$compiler-$hash-$generator-$build_type"
          echo "::set-output name=restore-key::$os-$compiler-$hash"
          echo "::set-output name=date::$current_date"

      - name: Cache Ccache folder
        uses: actions/cache@v3
        with:
          key: ccache-${{ steps.cache-key.outputs.key }}-${{ steps.cache-key.outputs.date }}
          restore-keys: ccache-${{ steps.cache-key.outputs.restore-key }}
          path: ${{ env.CCACHE_DIR }}

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Login to JFrog Artifactory
        run: |
          conan remote add --insert 0 \
                           "$JF_ARTIFACTORY_NAME" \
                           "https://paulsengroup.jfrog.io/artifactory/api/conan/$JF_ARTIFACTORY_NAME"

          conan user -p ${{ secrets.JF_ARTIFACTORY_TOKEN }} \
                     -r "$JF_ARTIFACTORY_NAME"              \
                     ${{ secrets.JF_ARTIFACTORY_USERNAME }}

      - name: Download deps
        run: |
          conan install conanfile.py                  \
               --remote "$JF_ARTIFACTORY_NAME"        \
               --build=never                          \
               -s build_type=${{ matrix.build_type }} \
               -s compiler.libcxx=libstdc++11         \
               -s compiler.cppstd=17

      - name: Configure project
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          mkdir ${{ github.workspace }}/build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
                -DENABLE_TESTING=ON                                  \
                -DENABLE_DEVELOPER_MODE=${{ matrix.developer_mode }} \
                -DOPT_ENABLE_CLANG_TIDY=OFF                          \
                -DOPT_ENABLE_CPPCHECK=OFF                            \
                -G "${{ matrix.generator }}"                         \
                -S "${{ github.workspace }}"                         \
                -B "${{ github.workspace }}/build"


      - name: Build project
        run: cmake --build ${{ github.workspace }}/build -j $(nproc)

      - name: Print Ccache statistics
        run: ccache -s

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/build
        run: |

          mkdir -p /tmp/
          TMPDIR=/tmp \
          ctest --test-dir .             \
                --schedule-random        \
                --output-on-failure      \
                --no-tests=error         \
                --timeout 180            \
                -j $(nproc)

      - name: Run modle integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_integration_test.sh ${{ github.workspace }}/build/src/modle/modle

      - name: Run modle_tools transform integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/build/src/modle_tools/modle_tools
          ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/build/src/modle_tools/modle_tools

      - name: Run modle_tools evaluate integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_eval_integration_test.sh ${{ github.workspace }}/build/src/modle_tools/modle_tools

      - name: Inspect MoDLE version
        run: |
          ${{ github.workspace }}/build/src/modle/modle --version
          ${{ github.workspace }}/build/src/modle_tools/modle_tools --version

  build-project-long:
    needs: [ build-dependencies-short, build-dependencies-long ]
    if: "contains(github.event.head_commit.message, '[ci full]')"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Debug builds
          - { compiler: gcc-9,     os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: OFF }
          - { compiler: gcc-10,    os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: OFF }
          - { compiler: gcc-11,    os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: ON }
          - { compiler: clang-9,   os: 'ubuntu-20.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: OFF }
          - { compiler: clang-10,  os: 'ubuntu-20.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: OFF }
          - { compiler: clang-11,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: OFF }
          - { compiler: clang-12,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: OFF }
          - { compiler: clang-13,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Debug, developer_mode: ON }
          # Release builds
          - { compiler: gcc-8,     os: 'ubuntu-20.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          - { compiler: gcc-9,     os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          - { compiler: gcc-10,    os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: ON }
          - { compiler: gcc-11,    os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: ON }
          - { compiler: gcc-12,    os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: ON }
          - { compiler: clang-8,   os: 'ubuntu-20.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang-9,   os: 'ubuntu-20.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang-10,  os: 'ubuntu-20.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang-11,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang-12,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: ON }
          - { compiler: clang-13,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: ON }
          - { compiler: clang-14,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: ON }
          # Make sure project builds with make
          - { compiler: clang-14,  os: 'ubuntu-22.04',  generator: "Unix Makefiles", cmake: '3.24.*', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          # Make sure project builds with CMake 3.18
          - { compiler: clang-14,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.18.4', conan: '1.52.*', build_type: Release, developer_mode: OFF }
          # Make sure project builds with Conan 1.51
          - { compiler: clang-14,  os: 'ubuntu-22.04',  generator: Ninja, cmake: '3.24.*', conan: '1.51.*', build_type: Release, developer_mode: OFF }

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/modle/${{ matrix.os }}-cxx-${{ matrix.compiler }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3

      - name: Update build deps
        shell: bash
        run: |
          pattern='[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+$'

          if [[ $(cmake --version | grep -o "$pattern") != ${{ matrix.cmake }} ||
                $(conan --version | grep -o "$pattern") != ${{ matrix.conan }} ]]; then
            apt-get update
            apt-get install -y python3-pip

            pip install "cmake==${{ matrix.cmake }}" "conan==${{ matrix.conan }}"
          fi

      - name: Generate cache key
        id: cache-key
        run: |
          os="${{ matrix.os }}"
          compiler="${{ matrix.compiler }}"
          generator="${{ matrix.generator }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/unit-tests-ubuntu.yml') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          echo "::set-output name=key::$os-$compiler-$hash-$generator-$build_type"
          echo "::set-output name=restore-key::$os-$compiler-$hash"
          echo "::set-output name=date::$current_date"

      - name: Cache Ccache folder
        uses: actions/cache@v3
        with:
          key: ccache-${{ steps.cache-key.outputs.key }}-${{ steps.cache-key.outputs.date }}
          restore-keys: ccache-${{ steps.cache-key.outputs.restore-key }}
          path: ${{ env.CCACHE_DIR }}

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Login to JFrog Artifactory
        run: |
          conan remote add --insert 0 \
                           "$JF_ARTIFACTORY_NAME" \
                           "https://paulsengroup.jfrog.io/artifactory/api/conan/$JF_ARTIFACTORY_NAME"

          conan user -p ${{ secrets.JF_ARTIFACTORY_TOKEN }} \
                     -r "$JF_ARTIFACTORY_NAME"              \
                     ${{ secrets.JF_ARTIFACTORY_USERNAME }}

      - name: Download deps
        run: |
          conan install conanfile.py                  \
               --remote "$JF_ARTIFACTORY_NAME"        \
               --build=never                          \
               -s build_type=${{ matrix.build_type }} \
               -s compiler.libcxx=libstdc++11         \
               -s compiler.cppstd=17

      - name: Configure project
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          mkdir ${{ github.workspace }}/build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
                -DENABLE_TESTING=ON                                  \
                -DENABLE_DEVELOPER_MODE=${{ matrix.developer_mode }} \
                -DOPT_ENABLE_CLANG_TIDY=OFF                          \
                -DOPT_ENABLE_CPPCHECK=OFF                            \
                -G "${{ matrix.generator }}"                         \
                -B "${{ github.workspace }}/build"                   \
                "${{ github.workspace }}"

      - name: Build project
        run: cmake --build ${{ github.workspace }}/build -j $(nproc)

      - name: Print Ccache statistics
        run: ccache -s

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest --test-dir .        \
                --schedule-random   \
                --output-on-failure \
                --no-tests=error    \
                --timeout 180       \
                -j $(nproc)

      - name: Run modle integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_integration_test.sh ${{ github.workspace }}/build/src/modle/modle

      - name: Run modle_tools transform integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/build/src/modle_tools/modle_tools
          ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/build/src/modle_tools/modle_tools

      - name: Run modle_tools evaluate integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_eval_integration_test.sh ${{ github.workspace }}/build/src/modle_tools/modle_tools

      - name: Inspect MoDLE version
        run: |
          ${{ github.workspace }}/build/src/modle/modle --version
          ${{ github.workspace }}/build/src/modle_tools/modle_tools --version
