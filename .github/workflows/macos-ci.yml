# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: MacOS CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/macos-ci.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "!test/scripts/devel/**"
      - "CMakeLists.txt"
      - "conanfile.txt"

  pull_request:
    paths:
      - ".github/workflows/macos-ci.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "!test/scripts/devel/**"
      - "CMakeLists.txt"
      - "conanfile.txt"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CCACHE_DIR: "${{ github.workspace }}/ccache-cache"
  CCACHE_COMPILERCHECK: "content"
  CCACHE_COMPRESSLEVEL: "1"
  CCACHE_MAXSIZE: "250M"
  CONAN_HOME: "${{ github.workspace }}/.conan2"
  HOMEBREW_NO_AUTO_UPDATE: "1"
  MODLE_CI: "1"

defaults:
  run:
    shell: bash

jobs:
  matrix-factory:
    name: Generate job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765

            var includes = []

            includes.push({ compiler_name: 'apple-clang', compiler_version: '15', os: 'macos-13', target_os: 'auto', cmake: '4.0.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '15', os: 'macos-14', target_os: 'auto', cmake: '4.0.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '16', os: 'macos-15', target_os: 'auto', cmake: '4.0.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '15', os: 'macos-13', target_os: 'auto', cmake: '4.0.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '15', os: 'macos-14', target_os: 'auto', cmake: '4.0.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '16', os: 'macos-15', target_os: 'auto', cmake: '4.0.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '15', os: 'macos-13', target_os: '11.0', cmake: '4.0.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler_name: 'apple-clang', compiler_version: '16', os: 'macos-15', target_os: '11.0', cmake: '4.0.*', build_type: 'Release', developer_mode: 'OFF' })

            return { include: includes }

  cache-test-dataset:
    name: Cache test dataset
    uses: paulsengroup/modle/.github/workflows/cache-test-datasets.yml@75f936a00588191e1c59c66b789f6a8dc1f1beb9

  build-conan-deps-x86:
    name: Build Conan deps
    uses: paulsengroup/modle/.github/workflows/build-conan-deps-macos.yml@473e56428a2d40c29e260d02f2f89c3c91ab3abd
    with:
      os: macos-13

  build-conan-deps-arm64:
    name: Build Conan deps
    uses: paulsengroup/modle/.github/workflows/build-conan-deps-macos.yml@473e56428a2d40c29e260d02f2f89c3c91ab3abd
    with:
      os: macos-14

  build-project:
    name: Build project
    needs:
      - matrix-factory
      - build-conan-deps-x86
      - build-conan-deps-arm64
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Generate requirements.txt for pip
        run: echo 'cmake==${{ matrix.cmake }}' > requirements.txt

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Detect number available CPUs
        run: |
          ncpus=$(python -c 'import multiprocessing as mp; print(mp.cpu_count())')

          echo "NPROC=$ncpus" >> $GITHUB_ENV
          echo "CMAKE_BUILD_PARALLEL_LEVEL=$ncpus" >> $GITHUB_ENV
          echo "CTEST_PARALLEL_LEVEL=$ncpus" >> $GITHUB_ENV

      - name: Set macOS SDK version
        run: |
          if [[ ${{ matrix.target_os }} == 'auto' ]]; then
            SDK_PATH="$(xcrun --sdk macosx --show-sdk-path)"
            MACOSX_DEPLOYMENT_TARGET="$(basename "$SDK_PATH" | sed -E 's/^MacOSX(.*)\.sdk$/\1/')"
          else
            MACOSX_DEPLOYMENT_TARGET='${{ matrix.target_os }}'
          fi

          echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET" | tee -a $GITHUB_ENV

      - name: Install build deps
        run: |
          pip install -r requirements.txt
          brew install ccache

      - name: Generate cache key
        id: cache-key
        run: |
          set -u

          os="${{ matrix.os }}"
          target_os="${{ matrix.target_os }}"
          compiler="${{ matrix.compiler_name }}"
          compiler_version="${{ matrix.compiler_version }}"
          build_type="${{ matrix.build_type }}"

          conanfile_hash="${{ hashFiles('conanfile.py') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          ccache_key_prefix="ccache-$os-$target_os-sdk-$compiler-$compiler_version-$conanfile_hash-$build_type"

          echo "ccache-key=${ccache_key_prefix}-$GITHUB_REF-${current_date}" | tee -a $GITHUB_OUTPUT
          echo "ccache-restore-key-1=$ccache_key_prefix-$GITHUB_REF" | tee -a $GITHUB_OUTPUT
          echo "ccache-restore-key-2=$ccache_key_prefix" | tee -a $GITHUB_OUTPUT

      - name: Restore Conan cache (x86)
        if: matrix.os == 'macos-13'
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.build-conan-deps-x86.outputs.conan-key }}
          path: |
            ${{ env.CONAN_HOME }}/p
            /tmp/cmake-prefix-dbg.tar
            /tmp/cmake-prefix-rel.tar
          fail-on-cache-miss: true

      - name: Restore Conan cache (arm64)
        if: matrix.os == 'macos-14' || matrix.os == 'macos-15'
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.build-conan-deps-arm64.outputs.conan-key }}
          path: |
            ${{ env.CONAN_HOME }}/p
            /tmp/cmake-prefix-dbg.tar
            /tmp/cmake-prefix-rel.tar
          fail-on-cache-miss: true

      - name: Extract CMake configs (Debug)
        if: matrix.build_type == 'Debug'
        run: |
          mkdir conan-env
          tar -xf /tmp/cmake-prefix-dbg.tar -C conan-env/ --strip-components=1

      - name: Extract CMake configs (Release)
        if: matrix.build_type == 'Release'
        run: |
          mkdir conan-env
          tar -xf /tmp/cmake-prefix-rel.tar -C conan-env/ --strip-components=1

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
                -DCMAKE_PREFIX_PATH="$PWD/conan-env"                 \
                -DMODLE_ENABLE_TESTING=ON                            \
                -DMODLE_DOWNLOAD_TEST_DATASET=OFF                    \
                -DENABLE_DEVELOPER_MODE=${{ matrix.developer_mode }} \
                -DOPT_ENABLE_CLANG_TIDY=OFF                          \
                -DOPT_ENABLE_CPPCHECK=OFF                            \
                -DCMAKE_INSTALL_PREFIX=dest                          \
                -S "${{ github.workspace }}"                         \
                -B "${{ github.workspace }}/build"

      - name: Restore Ccache folder
        id: cache-ccache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-restore-key-1 }}
          restore-keys: ${{ steps.cache-key.outputs.ccache-restore-key-2 }}
          path: ${{ env.CCACHE_DIR }}

      - name: Reset Ccache stats
        run: ccache --zero-stats

      - name: Build project
        run: cmake --build ${{ github.workspace }}/build

      - name: Package binaries
        run: |
          cmake --install build

          echo "### MACOSX_DEPLOYMENT_TARGET ###"
          otool -l dest/bin/modle |
            awk \
              '/LC_VERSION_MIN_MACOSX/ { found_version_min = 1; next }
               /LC_BUILD_VERSION/ { found_build_version = 1; next }
               found_version_min && /version/ { print $0; exit }
               found_build_version && /minos/ { print $0; exit }'

          gtar -cf - -C dest/ bin | zstd -T0 -13 -o binaries.tar.zst

      - name: Package unit tests
        run: |
          rm -r build/src
          gtar --exclude='*.o' -cf - build/ | zstd -T0 -13 -o unit-tests.tar.zst

      - name: Upload unit tests
        uses: actions/upload-artifact@v4
        with:
          name: "unit-tests-${{ matrix.os }}-\
            ${{ matrix.target_os }}-sdk\
            ${{ matrix.compiler_name }}-\
            ${{ matrix.compiler_version }}-\
            ${{ matrix.build_type }}-\
            ${{ matrix.developer_mode }}"
          path: unit-tests.tar.zst
          if-no-files-found: error
          retention-days: 1

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: "binaries-${{ matrix.os }}-\
            ${{ matrix.target_os }}-sdk\
            ${{ matrix.compiler_name }}-\
            ${{ matrix.compiler_version }}-\
            ${{ matrix.build_type }}-\
            ${{ matrix.developer_mode }}"
          path: binaries.tar.zst
          if-no-files-found: error
          retention-days: ${{ matrix.target_os == 'auto' && 1 || 7 }}

      - name: Print Ccache statistics (pre-cleanup)
        run: |
          ccache --show-stats \
                 --show-compression \
                 --verbose

      - name: Cleanup Ccache folder
        run: |
          ccache --evict-older-than=14400s # 4h
          ccache --recompress=19 --recompress-threads="$NPROC"
          ccache --cleanup

      - name: Print Ccache statistics (post-cleanup)
        run: |
          ccache --show-stats \
                 --show-compression \
                 --verbose

      - name: Save Ccache folder
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-key }}
          path: ${{ env.CCACHE_DIR }}
        env:
          ZSTD_CLEVEL: 1

      - name: Generate list of stale cache entries
        id: stale-cache
        if: steps.cache-ccache.outputs.cache-matched-key != ''
        run: |
          fname='stale-cache-${{ matrix.os }}-${{ matrix.compiler_name }}-${{ matrix.compiler_version }}-${{ matrix.build_type }}-${{ matrix.developer_mode }}.txt'
          echo '${{ steps.cache-ccache.outputs.cache-matched-key }}' > "$fname"

          echo "name=$fname" | tee -a "$GITHUB_OUTPUT"

      - name: Upload stale cache entries
        if: steps.cache-ccache.outputs.cache-matched-key != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.stale-cache.outputs.name }}
          path: "${{ steps.stale-cache.outputs.name }}"
          if-no-files-found: error
          retention-days: 1

  clean-stale-cache:
    needs: [build-project]
    name: Evict stale cache entries
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: stale-cache-*
          merge-multiple: true

      - name: Evict cache entries
        continue-on-error: true
        run: |
          set -x
          while read entry; do
            if ! grep -q '/heads/main' <(echo "$entry"); then
              gh cache delete --repo '${{ github.repository }}' "$entry"
            fi
          done < <(cat stale-cache*.txt | grep -v '^$')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-unit-tests:
    name: Run unit tests
    needs: [matrix-factory, cache-test-dataset, build-project]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}
    env:
      MODLE_CI: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/modle_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Download unit tests artifact
        uses: actions/download-artifact@v4
        with:
          name: "unit-tests-${{ matrix.os }}-\
            ${{ matrix.target_os }}-sdk\
            ${{ matrix.compiler_name }}-\
            ${{ matrix.compiler_version }}-\
            ${{ matrix.build_type }}-\
            ${{ matrix.developer_mode }}"

      - name: Extract binaries test dataset
        run: |
          gtar -xf unit-tests.tar.zst
          gtar -xf test/data/modle_test_data.tar.zst

      - name: Generate requirements.txt for pip
        run: |
          echo 'cmake==${{ matrix.cmake }}' > requirements.txt

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install test dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: |
          ctest --test-dir build/   \
                --schedule-random   \
                --output-on-failure \
                --no-tests=error    \
                --timeout 300

  run-modle-integration-test:
    name: Run modle integration tests
    needs: [matrix-factory, cache-test-dataset, build-project]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}
    env:
      MODLE_CI: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: "binaries-${{ matrix.os }}-\
            ${{ matrix.target_os }}-sdk\
            ${{ matrix.compiler_name }}-\
            ${{ matrix.compiler_version }}-\
            ${{ matrix.build_type }}-\
            ${{ matrix.developer_mode }}"

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/modle_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Extract binaries and test dataset
        run: |
          zstd -dcf binaries.tar.zst | tar -xf -
          gtar -xf test/data/modle_test_data.tar.zst

      - name: Generate requirements.txt for pip
        run: |
          echo 'cooler>=0.10.3' > requirements.txt
          echo 'pyBigWig>=0.3.24' >> requirements.txt
          echo 'numpy' >> requirements.txt  # required to avoid errors when importing pyBigWig

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install test deps
        run: pip install -v -r requirements.txt --no-binary pyBigWig

      - name: Inspect modle version
        run: bin/modle --version

      - name: Run modle integration test(s)
        run: test/scripts/modle_integration_test.sh bin/modle | head -n 1000

  run-modle-tools-integration-test:
    name: Run modle_tools integration tests
    needs: [ matrix-factory, cache-test-dataset, build-project ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}
    env:
      MODLE_CI: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: "binaries-${{ matrix.os }}-\
            ${{ matrix.target_os }}-sdk\
            ${{ matrix.compiler_name }}-\
            ${{ matrix.compiler_version }}-\
            ${{ matrix.build_type }}-\
            ${{ matrix.developer_mode }}"

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/modle_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Extract binaries and test dataset
        run: |
          zstd -dcf binaries.tar.zst | tar -xf -
          gtar -xf test/data/modle_test_data.tar.zst

      - name: Generate requirements.txt for pip
        run: |
          echo 'cooler>=0.10.3' > requirements.txt
          echo 'pyBigWig>=0.3.24' >> requirements.txt
          echo 'numpy' >> requirements.txt  # required to avoid errors when importing pyBigWig

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install test dependencies
        run: pip install -r requirements.txt --no-binary pyBigWig

      - name: Inspect modle_tools version
        run: bin/modle_tools --version

      - name: Run modle_tools transform integration test(s)
        run: test/scripts/modle_tools_transform_integration_test.sh bin/modle_tools | head -n 1000

      - name: Run modle_tools evaluate integration test(s)
        run: test/scripts/modle_tools_eval_integration_test.sh bin/modle_tools | head -n 1000

      - name: Run modle_tools annotate-barriers integration test(s)
        run: test/scripts/modle_tools_annotate_barriers_integration_test.sh bin/modle_tools | head -n 1000

  macos-ci-status-check:
    name: Status Check (MacOS CI)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-project
      - run-unit-tests
      - run-modle-integration-test
      - run-modle-tools-integration-test

    steps:
      - name: Collect job results
        if: |
          needs.build-project.result != 'success'                    ||
          needs.run-unit-tests.result != 'success'                   ||
          needs.run-modle-integration-test.result != 'success'       ||
          needs.run-modle-tools-integration-test.result != 'success'
        run: exit 1
