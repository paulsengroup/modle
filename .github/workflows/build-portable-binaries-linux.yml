# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Build portable Linux binaries

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/build-portable-binaries-linux.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "!test/scripts/devel/**"
      - "CMakeLists.txt"
      - "conanfile.txt"
    tags:
      - 'v*.*.*'

  release:
    types: [ created ]

  workflow_dispatch:

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CCACHE_DIR: "/opt/ccache-cache"
  CCACHE_COMPRESSLEVEL: "13"
  CCACHE_MAXSIZE: "200M"
  CONAN_HOME: "/opt/conan/"

jobs:
  cache-test-datasets:
    uses: paulsengroup/modle/.github/workflows/cache-test-datasets.yml@main


  build-portable-binaries:
    name: Build project
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/centos7-gcc-11:latest
      options: "--user=root"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: |
          set -e
          set -u

          os="centos-7"
          compiler="gcc-11"
          hash="${{ hashFiles('conanfile.txt', '.github/workflows/build-portable-binary-ubuntu.yml') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          conan_key_prefix="conan-$os-$compiler-$hash"
          ccache_key_prefix="ccache-$os-$compiler-$hash"

          echo "conan-key=$conan_key_prefix" >> $GITHUB_OUTPUT
          echo "conan-restore-key=$conan_key_prefix" >> $GITHUB_OUTPUT

          echo "ccache-key=${ccache_key_prefix}-${current_date}" >> $GITHUB_OUTPUT
          echo "ccache-restore-key=$ccache_key_prefix" >> $GITHUB_OUTPUT

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache-key.outputs.conan-key }}
          restore-keys: ${{ steps.cache-key.outputs.conan-restore-key }}
          path: ${{ env.CONAN_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Build conanfile.txt
        run: |
          # We need to rebuild b2 to workaround GLIBCXX incompatibilities
          PATH="/opt/rh/devtoolset-11/root/usr/bin/:$PATH" \
          conan install conanfile.txt              \
               --build=missing                     \
               --build="b2*"                       \
               -pr:b="$CONAN_DEFAULT_PROFILE_PATH" \
               -pr:h="$CONAN_DEFAULT_PROFILE_PATH" \
               -s build_type=Release               \
               -s compiler.libcxx=libstdc++        \
               -s compiler.cppstd=17               \
               --output-folder=build/

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Cache Ccache folder
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache-key.outputs.ccache-key }}
          restore-keys: ${{ steps.cache-key.outputs.ccache-restore-key }}
          path: ${{ env.CCACHE_DIR }}

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release            \
                -DCMAKE_PREFIX_PATH="$PWD/build"      \
                -DMODLE_ENABLE_TESTING=ON             \
                -DMODLE_DOWNLOAD_TEST_DATASET=OFF     \
                -DENABLE_DEVELOPER_MODE=OFF           \
                -DCMAKE_INSTALL_PREFIX="/tmp/modle/"  \
                -S .                                  \
                -B build/

      - name: Build project
        run: cmake --build build -j $(nproc)

      - name: Print Ccache statistics
        run: ccache -s

      - name: Install project
        run: |
          cmake --install build/
          cp build/test/test_main /tmp/modle/bin

      - name: Inspect MoDLE version
        working-directory: /tmp/modle
        run: |
          bin/modle --version
          bin/modle_tools --version

      - name: Archive binaries
        working-directory: /tmp
        run: |
          tar -czf modle.tar.gz modle
          tar -tf modle.tar.gz

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: portable-bins
          if-no-files-found: error
          retention-days: 1
          path: /tmp/modle.tar.gz


  run-unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: [build-portable-binaries, cache-test-datasets]
    container:
      image: centos:7
      options: "--user=root"

    steps:
      - uses: actions/checkout@v3

      - name: Download Binaries
        uses: actions/download-artifact@v4.1.7
        with:
          name: portable-bins

      - name: Download test datasets
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ needs.cache-test-datasets.outputs.artifact-name }}

      - name: Extract binaries and test dataset
        run: |
          tar -xf modle.tar.gz
          tar -xf modle_test_data.tar.xz

      - name: Run unit tests
        run: modle/bin/test_main --durations=yes


  run-modle-integration-test:
    name: Run modle integration tests
    runs-on: ubuntu-latest
    needs: [build-portable-binaries, cache-test-datasets]
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/ubuntu-22.04-cxx-clang-15:latest
      options: "--user=root"

    steps:
      - uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v4.1.7
        with:
          name: portable-bins

      - name: Download test datasets
        id: test-dataset
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ needs.cache-test-datasets.outputs.artifact-name }}

      - name: Extract binaries and test dataset
        run: |
          tar -xf modle.tar.gz
          tar -xf modle_test_data.tar.xz

      - name: Run modle integration test(s)
        run: test/scripts/modle_integration_test.sh modle/bin/modle


  run-modle-tools-integration-test:
    name: Run modle_tools integration tests
    runs-on: ubuntu-latest
    needs: [build-portable-binaries, cache-test-datasets]
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/ubuntu-22.04-cxx-clang-15:latest
      options: "--user=root"

    steps:
      - uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v4.1.7
        with:
          name: portable-bins

      - name: Download test datasets
        id: test-dataset
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ needs.cache-test-datasets.outputs.artifact-name }}

      - name: Extract binaries and test dataset
        run: |
          tar -xf modle.tar.gz
          tar -xf modle_test_data.tar.xz

      - name: Run modle_tools transform integration test(s)
        run: test/scripts/modle_tools_transform_integration_test.sh modle/bin/modle_tools | head -n 1000

      - name: Run modle_tools evaluate integration test(s)
        run: test/scripts/modle_tools_eval_integration_test.sh modle/bin/modle_tools | head -n 1000

      - name: Run modle_tools annotate-barriers integration test(s)
        run: test/scripts/modle_tools_annotate_barriers_integration_test.sh modle/bin/modle_tools | head -n 1000


  run-portability-test:
    name: Test portability
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    strategy:
      matrix:
        image:
          - 'archlinux:base'
          - 'centos:7'
          - 'rockylinux:9'
          - 'fedora:34'
          - 'fedora:latest'
          - 'opensuse/leap:latest'
          - 'opensuse/tumbleweed:latest'
          - 'ubuntu:16.04'
          - 'ubuntu:latest'
      fail-fast: false

    container:
      image: ${{ matrix.image }}
      options: "--user=root"

    steps:
      - name: Install dependencies (Ubuntu)
        if: contains(matrix.image, 'ubuntu')
        run: |
          apt-get update
          apt-get install -y libstdc++6

      - name: Install dependencies (openSUSE)
        if: contains(matrix.image, 'opensuse')
        run: zypper install -y gzip libstdc++6 tar

      - name: Download binaries
        uses: actions/download-artifact@v4.1.7
        with:
          name: portable-bins

      - name: Extract binaries
        run: tar -xf modle.tar.gz

      - name: Test modle
        working-directory: modle/bin/
        run: |
          ./modle --version
          ./modle --help

          ./modle sim --help

      - name: Test modle_tools
        working-directory: modle/bin/
        run: |
          ./modle_tools --version
          ./modle_tools --help

          ./modle_tools eval --help
          ./modle_tools transform --help


  prepare-release-artifacts:
    name: Prepare release artifacts
    needs:
      - run-unit-tests
      - run-modle-integration-test
      - run-modle-tools-integration-test
      - run-portability-test

    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4.1.7
        with:
          name: portable-bins

      - name: Generate archive name
        id: archive-name
        run: |
          version="$(basename "$GITHUB_REF")"
          version="${version#v}"

          echo "prefix=modle-${version}-x86_64-linux" >> $GITHUB_OUTPUT
          echo "name=modle-${version}-x86_64-linux.tar.xz" >> $GITHUB_OUTPUT

      - name: Archive binaries
        run: |
          tar -xf modle.tar.gz
          rm modle/bin/test_main

          mv modle "${{ steps.archive-name.outputs.prefix }}"
          tar -cJf "${{ steps.archive-name.outputs.name }}" "${{ steps.archive-name.outputs.prefix }}"

          tar -tf "${{ steps.archive-name.outputs.name }}"

      - name: Upload archive
        uses: actions/upload-artifact@v3
        if: github.event_name != 'release'
        with:
          name: ${{ steps.archive-name.outputs.prefix }}
          if-no-files-found: error
          retention-days: 7
          path: ${{ steps.archive-name.outputs.name }}

      - name: Upload release archive
        uses: actions/upload-artifact@v3
        if: github.event_name == 'release'
        with:
          name: ${{ steps.archive-name.outputs.prefix }}
          if-no-files-found: error
          retention-days: 90
          path: ${{ steps.archive-name.outputs.name }}


  build-portable-binaries-status-check:
    name: Status Check (Build portable Linux binaries)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - cache-test-datasets
      - build-portable-binaries
      - run-unit-tests
      - run-modle-integration-test
      - run-modle-tools-integration-test
      - run-portability-test
      - prepare-release-artifacts

    steps:
      - name: Collect job results
        if: |
          needs.cache-test-datasets.result != 'success'                ||
          needs.build-portable-binaries.result != 'success'            ||
          needs.run-unit-tests.result != 'success'                     ||
          needs.run-modle-integration-test.result != 'success'         ||
          needs.run-modle-tools-integration-test.result != 'success'   ||
          needs.run-portability-test.result != 'success'               ||
          needs.prepare-release-artifacts.result != 'success'
        run: exit 1
