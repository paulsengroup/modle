# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Build portable Linux binaries

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/build-portable-binaries-linux.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/build-portable-binaries-linux.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

  release:
    types: [ created ]

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_REVISIONS_ENABLED: "1"
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"

jobs:
  build-portable-binaries:
    runs-on: ubuntu-latest
    container:
      image: centos:7
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Install build deps
        run: |
          yum install -y centos-release-scl \
                         git \
                         python3 -y

          yum install -y devtoolset-11 \
                         rh-git227

          pip3 install --upgrade pip
          pip3 install 'cmake>=3.18' 'conan>=1.51.3'

      - uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: |
          os="centos-7"
          compiler="gcc-11"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/build-portable-binary-ubuntu.yml') }}"

          echo "::set-output name=key::$os-$compiler-$hash"

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Build conanfile.py
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          source /opt/rh/devtoolset-11/enable
          source /opt/rh/rh-git227/enable

          # Workaround GLIBCXX version mismatch
          printf '[requires]\nb2/4.9.2\n' > /tmp/conanfile.txt
          conan install conanfile.txt --build=b2

          conan install conanfile.py          \
               --build=outdated               \
               --update                       \
               -s build_type=Release          \
               -s compiler.libcxx=libstdc++11 \
               -s compiler.cppstd=17

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
          conan remove -f "*" --outdated

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Configure project
        run: |
          source /opt/rh/devtoolset-11/enable
          source /opt/rh/rh-git227/enable

          git config --global --add safe.directory ${{ github.workspace }}
          mkdir ${{ github.workspace }}/build
          cmake -DCMAKE_BUILD_TYPE=Release         \
                -DENABLE_TESTING=ON                \
                -DENABLE_DEVELOPER_MODE=OFF        \
                -S "${{ github.workspace }}"       \
                -B "${{ github.workspace }}/build"

      - name: Build project
        run: |
          source /opt/rh/devtoolset-11/enable
          source /opt/rh/rh-git227/enable

          cmake --build ${{ github.workspace }}/build -j $(nproc)

      - name: Inspect MoDLE version
        run: |
          ${{ github.workspace }}/build/src/modle/modle --version
          ${{ github.workspace }}/build/src/modle_tools/modle_tools --version

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: portable-bins
          if-no-files-found: error
          retention-days: 1
          path: |
            ${{ github.workspace }}/build/src/modle/modle
            ${{ github.workspace }}/build/src/modle_tools/modle_tools
            ${{ github.workspace }}/build/test/test_main

  run-automated-tests:
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/ubuntu-22.04-cxx-clang-14:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins
          path: ${{ github.workspace }}/build/bin/

      - name: Fix permissions
        working-directory: ${{ github.workspace }}/build/bin/
        run: chmod 755 *

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Extract test datasets
        run: tar -xf ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Run unit tests
        working-directory: ${{ github.workspace }}
        run: ${{ github.workspace }}/build/bin/test_main --durations=yes

      - name: Run modle integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_integration_test.sh ${{ github.workspace }}/build/bin/modle

      - name: Run modle_tools transform integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/build/bin/modle_tools

      - name: Run modle_tools evaluate integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_eval_integration_test.sh ${{ github.workspace }}/build/bin/modle_tools

  portability-test:
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    strategy:
      matrix:
        image:
          - 'centos:7'
          - 'fedora:34'
          - 'fedora:latest'
          - 'opensuse/leap:latest'
          - 'opensuse/tumbleweed:latest'
          - 'ubuntu:16.04'
          - 'ubuntu:latest'

    container:
      image: ${{ matrix.image }}
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins

      - name: Fix permissions
        working-directory: ${{ github.workspace }}/build/bin/
        run: chmod 755 *

      - name: Test modle
        run: |
          modle --version
          modle --help

          modle sim --help

      - name: Test modle_tools
        run: |
          modle_tools --version
          modle_tools --help

          modle_tools eval --help
          modle_tools transform --help
