# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Build portable Linux binaries

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/build-portable-binaries-linux.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/build-portable-binaries-linux.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

  release:
    types: [ created ]

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_REVISIONS_ENABLED: "1"
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"
  CCACHE_DIR: "${{ github.workspace }}/ccache-cache"
  CCACHE_COMPRESSLEVEL: "13"
  CCACHE_MAXSIZE: "200M"

jobs:
  build-portable-binaries:
    runs-on: ubuntu-latest
    container:
      image: centos:7
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Install build deps
        run: |
          yum install -y centos-release-scl \
                         git \
                         python3 -y

          yum install -y devtoolset-11 \
                         rh-git227

          pip3 install --upgrade pip
          pip3 install 'cmake>=3.18' 'conan>=1.51.3'

          # Download and install ccache
          curl -LO 'https://github.com/ccache/ccache/releases/download/v4.6.3/ccache-4.6.3-linux-x86_64.tar.xz'
          echo 'abfa3a89de66f98972da43acbc52894a3f328fa784d0a33d45288c9bd450339d  ccache-4.6.3-linux-x86_64.tar.xz' > checksum.sha256
          sha256sum -c checksum.sha256

          tar -xf ccache-4.6.3-linux-x86_64.tar.xz
          make -C ccache-4.6.3-linux-x86_64 install

          whereis ccache
          ccache --version

      - uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: |
          os="centos-7"
          compiler="gcc-11"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/build-portable-binary-ubuntu.yml') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          echo "::set-output name=key::$os-$compiler-$hash"
          echo "::set-output name=date::$current_date"

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Configure Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          source /opt/rh/devtoolset-11/enable

          conan profile new "$CONAN_USER_HOME/profiles/default" --detect --force
          conan config init

          conan profile update settings.compiler=gcc default
          conan profile update settings.compiler.version=11 default
          conan profile update settings.compiler.cppstd=17 default
          conan profile update settings.compiler.libcxx=libstdc++ default

          conan profile show default

      - name: Build conanfile.py
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          source /opt/rh/devtoolset-11/enable

          # Workaround GLIBCXX version mismatch
          printf '[requires]\nb2/4.9.2\n' > /tmp/conanfile.txt
          conan install /tmp/conanfile.txt --build=b2

          conan install conanfile.py          \
               --build=outdated               \
               --update                       \
               -s build_type=Release

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
          conan remove -f "*" --outdated

      - name: Cache Ccache folder
        uses: actions/cache@v3
        with:
          key: ccache-${{ steps.cache-key.outputs.key }}-${{ steps.cache-key.outputs.date }}
          restore-keys: ccache-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CCACHE_DIR }}

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Configure project
        working-directory: ${{ github.workspace }}
        run: |
          source /opt/rh/devtoolset-11/enable
          source /opt/rh/rh-git227/enable

          git config --global --add safe.directory ${{ github.workspace }}
          mkdir ${{ github.workspace }}/build
          cmake -DCMAKE_BUILD_TYPE=Release            \
                -DENABLE_TESTING=ON                   \
                -DENABLE_DEVELOPER_MODE=OFF           \
                -DCMAKE_INSTALL_PREFIX="/tmp/modle/"  \
                -S "${{ github.workspace }}"          \
                -B "${{ github.workspace }}/build"

      - name: Build project
        working-directory: ${{ github.workspace }}
        run: |
          source /opt/rh/devtoolset-11/enable
          source /opt/rh/rh-git227/enable

          cmake --build build -j $(nproc)

      - name: Print Ccache statistics
        run: ccache -s

      - name: Install project
        working-directory: ${{ github.workspace }}
        run: |
          cmake --install build/
          cp build/test/test_main build/bin

      - name: Inspect MoDLE version
        working-directory: /tmp/modle
        run: |
          bin/modle --version
          bin/modle_tools --version

      - name: Archive binaries
        working-directory: /tmp
        run: |
          tar -czf modle.tar.gz modle
          tar -tf modle.tar.gz

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: portable-bins
          if-no-files-found: error
          retention-days: 1
          path: /tmp/modle.tar.gz

  run-unit-tests:
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/ubuntu-22.04-cxx-clang-14:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins

      - name: Extract binaries
        run: |
          tar -xf modle.tar.gz
          ls -lah .

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Extract test datasets
        run: tar -xf ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Run unit tests
        run: modle/bin/test_main --durations=yes

  run-modle-integration-tests:
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/ubuntu-22.04-cxx-clang-14:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins

      - name: Extract binaries
        run: tar -xf modle.tar.gz

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Extract test datasets
        run: tar -xf ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Run modle integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_integration_test.sh ${{ github.workspace }}/modle/bin/modle

  run-modle-tools-integration-tests:
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/ubuntu-22.04-cxx-clang-14:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins

      - name: Extract binaries
        run: tar -xf modle.tar.gz

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Extract test datasets
        run: tar -xf ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Run modle_tools transform integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/modle/bin/modle_tools

      - name: Run modle_tools evaluate integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_tools_eval_integration_test.sh ${{ github.workspace }}/modle/bin/modle_tools

  run-portability-test:
    runs-on: ubuntu-latest
    needs: build-portable-binaries
    strategy:
      matrix:
        image:
          - 'centos:7'
          - 'rockylinux:9'
          - 'fedora:34'
          - 'fedora:latest'
          - 'opensuse/leap:latest'
          - 'opensuse/tumbleweed:latest'
          - 'ubuntu:16.04'
          - 'ubuntu:latest'
      fail-fast: false

    container:
      image: ${{ matrix.image }}
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Install dependencies (Ubuntu)
        if: contains(matrix.image, 'ubuntu')
        run: |
          apt-get update
          apt-get install -y libstdc++6

      - name: Install dependencies (openSUSE)
        if: contains(matrix.image, 'opensuse')
        run: zypper install -y gzip libstdc++6 tar

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins

      - name: Extract binaries
        run: tar -xf modle.tar.gz

      - name: Test modle
        working-directory: modle/bin/
        run: |
          ./modle --version
          ./modle --help

          ./modle sim --help

      - name: Test modle_tools
        working-directory: modle/bin/
        run: |
          ./modle_tools --version
          ./modle_tools --help

          ./modle_tools eval --help
          ./modle_tools transform --help

  publish-binaries:
    if: github.event_name == 'release'
    needs:
      - run-unit-tests
      - run-modle-integration-tests
      - run-modle-tools-integration-tests
      - run-portability-test

    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: portable-bins

      - name: Extract binaries
        run: |
          tar -xf modle.tar.gz
          rm modle/bin/test_main

          tar -cJf modle.tar.xz modle

      - name: Upload Binaries
        uses: skx/github-action-publish-binaries@release-2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: modle.tar.xz
