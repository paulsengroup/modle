# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_REVISIONS_ENABLED: "1"
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"
  CCACHE_DIR: "${{ github.workspace }}/ccache-cache"
  CCACHE_COMPRESSLEVEL: "13"
  CCACHE_MAXSIZE: "200M"

defaults:
  run:
    shell: bash

jobs:
  matrix-factory:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.head_ref }}

      - name: Extract commit message
        id: extract-commit-message
        run: |
          # This is a workaround for empty github.event.head_commit.message when workflow was triggered by a PR
          if ${{ github.event_name == 'pull_request' }}; then
            echo "message='$(git log -1 --pretty=%B)'"
          else
            echo "message='${{ github.event.head_commit.message }}'"
          fi

      - name: Generate matrix
        uses: actions/github-script@v6
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765

            var commit_msg = "${{ steps.extract-commit-message.outputs.message }}"

            var ci_short = !commit_msg.includes('[ci full]')
            console.log("Commit message: %s", commit_msg)
            console.log("CI short: '%s'", ci_short.toString())

            var includes = []

            // Debug builds (short CI)
            includes.push({ compiler: 'gcc-8',     os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-12',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-8',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })

            // Release builds (short CI)
            includes.push({ compiler: 'gcc-12',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })

            if (ci_short) {
              return { include: includes }
            }

            // Debug builds (long CI)
            includes.push({ compiler: 'gcc-9',     os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-10',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-11',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'gcc-12',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-9',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-10',  os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-11',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-12',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-13',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })

            // Release builds (long CI)
            includes.push({ compiler: 'gcc-8',     os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-9',     os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-10',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'gcc-11',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-8',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-9',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-10',  os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-11',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-12',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-13',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })

            // Make sure project builds with CMake 3.20
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.20.5', conan: '1.52.*', build_type: 'Release', developer_mode: 'OFF' })
            // Make sure project builds with Conan 1.51
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.51.*', build_type: 'Release', developer_mode: 'OFF' })
            // Make sure project builds with make
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Unix Makefiles', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })

            return { include: includes }

  build-project:
    needs: matrix-factory
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/${{ matrix.os }}-cxx-${{ matrix.compiler }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Check build deps are up-to-date
        id: build-deps-outdated
        run: |
          pattern='[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+$'
          flag=false

          if [[ $(cmake --version | grep -o "$pattern") != ${{ matrix.cmake }} ||
                $(conan --version | grep -o "$pattern") != ${{ matrix.conan }} ]]; then
            flag=true
          fi

          echo "outdated=$flag" >> $GITHUB_OUTPUT

      - name: Update build deps
        if: ${{ steps.buld-deps-outdated.outputs.outdated }}
        run: |
            apt-get update
            apt-get install -y --no-install-recommends python3-pip

            python3 -m pip install         \
              "cmake==${{ matrix.cmake }}" \
              "conan==${{ matrix.conan }}"

      - name: Generate cache keys
        id: cache-key
        run: |
          os="${{ matrix.os }}"
          compiler="${{ matrix.compiler }}"
          generator="${{ matrix.generator }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/ubuntu-ci.yml') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          echo "key=$os-$compiler-$hash-$build_type-$generator" >> $GITHUB_OUTPUT
          echo "restore-key=$os-$compiler-$hash-$build_type" >> $GITHUB_OUTPUT
          echo "date=$current_date" >> $GITHUB_OUTPUT

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Clean Conan cache (pre-build)
        if: ${{ !steps.cache-conan.outputs.cache-hit }}
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Build conanfile.py
        if: ${{ !steps.cache-conan.outputs.cache-hit }}
        run: |
          conan install conanfile.py                  \
               --build=outdated                       \
               --update                               \
               -s build_type=${{ matrix.build_type }} \
               -s compiler.libcxx=libstdc++11         \
               -s compiler.cppstd=17

      - name: Clean Conan cache (post-build)
        if: ${{ !steps.cache-conan.outputs.cache-hit }}
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
          conan remove -f "*" --outdated

      - name: Cache Ccache folder
        uses: actions/cache@v3
        with:
          key: ccache-${{ steps.cache-key.outputs.key }}-${{ steps.cache-key.outputs.date }}
          restore-keys: ccache-${{ steps.cache-key.outputs.restore-key }}
          path: ${{ env.CCACHE_DIR }}

      - name: Configure project
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          mkdir ${{ github.workspace }}/build

          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
                -DMODLE_ENABLE_TESTING=ON                            \
                -DMODLE_DOWNLOAD_TEST_DATASET=OFF                    \
                -DENABLE_DEVELOPER_MODE=${{ matrix.developer_mode }} \
                -DOPT_ENABLE_CLANG_TIDY=OFF                          \
                -DOPT_ENABLE_CPPCHECK=OFF                            \
                -DCMAKE_INSTALL_PREFIX=dest                          \
                -G "${{ matrix.generator }}"                         \
                -S "${{ github.workspace }}"                         \
                -B "${{ github.workspace }}/build"

      - name: Build test units
        run: cmake --build ${{ github.workspace }}/build -t test_main -j $(nproc)

      - name: Package unit tests
        run: |
          tar -cf - ${{ github.workspace }}/build | zstd -T0 -13 -o unit-tests.tar.zst

      - name: Build modle and modle_tools
        run: cmake --build ${{ github.workspace }}/build -j $(nproc)

      - name: Package binaries
        run: |
          cmake --install ${{ github.workspace }}/build

          tar -cf - -C ${{ github.workspace }}/dest bin |
          zstd -T0 -13 -o binaries.tar.zst

      - name: Upload unit tests
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}-${{ matrix.build_type }}
          path: unit-tests.tar.zst
          if-no-files-found: error
          retention-days: 1

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}-${{ matrix.build_type }}
          path: binaries.tar.zst
          if-no-files-found: error
          retention-days: 1

      - name: Print Ccache statistics
        run: ccache -s

  unit-tests:
    needs: [matrix-factory, build-project]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/${{ matrix.os }}-cxx-${{ matrix.compiler }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download unit tests artifact
        uses: actions/download-artifact@v3
        with:
          name: unit-tests-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}-${{ matrix.build_type }}

      - name: Extract unit test artifact
        run: zstd -dcf unit-tests.tar.zst | tar -xf -

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/build
        run: |
          TMPDIR=/tmp
          export TMPDIR
          mkdir -p "$TMPDIR"

          ctest --test-dir .             \
                --schedule-random        \
                --output-on-failure      \
                --no-tests=error         \
                --timeout 180            \
                -j $(nproc)

  modle-integration-test:
    needs: [matrix-factory, build-project]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/modle/${{ matrix.os }}-cxx-${{ matrix.compiler }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}-${{ matrix.build_type }}

      - name: Extract binaries artifact
        run: zstd -dcf binaries.tar.zst | tar -xf -

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Inspect modle version
        run: bin/modle --version

      - name: Run modle integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: ./modle_integration_test.sh ${{ github.workspace }}/bin/modle

  modle-tools-integration-test:
    needs: [matrix-factory, build-project]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/modle/${{ matrix.os }}-cxx-${{ matrix.compiler }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}-${{ matrix.build_type }}

      - name: Extract binaries artifact
        run: zstd -dcf binaries.tar.zst | tar -xf -

      - name: Cache test datasets
        uses: actions/cache@v3
        with:
          key: test-dataset-${{ hashFiles('cmake/FetchTestDataset.cmake') }}
          path: ${{ github.workspace }}/test/data/modle_test_data.tar.gz

      - name: Inspect modle_tools version
        run: bin/modle_tools --version

      - name: Run modle_tools transform integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_transform_integration_test.sh ${{ github.workspace }}/bin/modle_tools

      - name: Run modle_tools evaluate integration test(s)
        working-directory: ${{ github.workspace }}/test/scripts
        run: |
          ./modle_tools_eval_integration_test.sh ${{ github.workspace }}/bin/modle_tools
