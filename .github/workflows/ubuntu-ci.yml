# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_REVISIONS_ENABLED: "1"
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"
  CCACHE_DIR: "${{ github.workspace }}/ccache-cache"
  CCACHE_COMPRESSLEVEL: "13"
  CCACHE_MAXSIZE: "200M"

defaults:
  run:
    shell: bash

jobs:
  matrix-factory:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.after }}

      - name: Get commit message
        id: get-commit-msg
        run: |
          msg="$(git log --format=%B -n 1 ${{ github.event.after }})"
          echo "message=${msg}" >> $GITHUB_OUTPUT

      - name: Generate matrix
        uses: actions/github-script@v6
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765

            var commit_msg = "${{ steps.get-commit-msg.outputs.message }}"

            var ci_short = !commit_msg.includes('[ci full]')
            console.log("Commit message: '%s'", commit_msg)
            console.log("CI short: '%s'", ci_short.toString())

            var includes = []

            // Debug builds (short CI)
            includes.push({ compiler: 'gcc-8',     os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-12',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-8',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })

            // Release builds (short CI)
            includes.push({ compiler: 'gcc-12',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })

            if (ci_short) {
              return { include: includes }
            }

            // Debug builds (long CI)
            includes.push({ compiler: 'gcc-9',     os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-10',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-11',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'gcc-12',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-9',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-10',  os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-11',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-12',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-13',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Debug',   developer_mode: 'ON'  })

            // Release builds (long CI)
            includes.push({ compiler: 'gcc-8',     os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-9',     os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'gcc-10',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'gcc-11',    os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-8',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-9',   os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-10',  os: 'ubuntu-20.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-11',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ compiler: 'clang-12',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ compiler: 'clang-13',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'ON'  })

            // Make sure project builds with CMake 3.20
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.20.5', conan: '1.52.*', build_type: 'Release', developer_mode: 'OFF' })
            // Make sure project builds with Conan 1.51
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Ninja', cmake: '3.24.*', conan: '1.51.*', build_type: 'Release', developer_mode: 'OFF' })
            // Make sure project builds with make
            includes.push({ compiler: 'clang-14',  os: 'ubuntu-22.04',  generator: 'Unix Makefiles', cmake: '3.24.*', conan: '1.53.*', build_type: 'Release', developer_mode: 'OFF' })

            return { include: includes }

  test-matrix:
    needs: matrix-factory
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    steps:
      - name: Test
        run: echo "${{ matrix.compiler }}"
