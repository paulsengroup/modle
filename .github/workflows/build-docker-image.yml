# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Build Docker image

on:
  create:
    tags:
      - 'v*.*.*'

  push:
    branches: [ main, devel, ci-devel ]
    paths:
      - ".github/workflows/build-docker-image.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/build-docker-image.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "conanfile.py"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate build args
        id: build-args
        run: |
          set -e
          set -u

          OS_NAME='ubuntu'
          OS_VERSION='20.04'
          C_COMPILER='clang-13'
          CXX_COMPILER='clang++-13'

          BUILD_BASE_IMAGE="ghcr.io/${{ github.repository_owner }}/ci-docker-images/modle/$OS_NAME-$OS_VERSION-cxx-$C_COMPILER:latest"
          TEST_BASE_IMAGE="$BUILD_BASE_IMAGE"

          FINAL_BASE_IMAGE="docker.io/library/$OS_NAME"
          FINAL_BASE_IMAGE_TAG="$OS_VERSION"
          FINAL_BASE_IMAGE_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$FINAL_BASE_IMAGE:$FINAL_BASE_IMAGE_TAG" | grep -o '[[:alnum:]:]\+$')"

          GIT_HASH="$(git rev-parse HEAD)"
          GIT_SHORT_HASH="$(git rev-parse --short HEAD)"
          CREATION_DATE="$(date --iso-8601)"
          GIT_TAG="$(git tag --sort=-v:refname --points-at | head -n 1)"
          if [ -z "$GIT_TAG" ]; then
            VERSION="sha-$GIT_SHORT_HASH"
          else
            VERSION="$GIT_TAG"
          fi

          echo "::set-output name=C_COMPILER::$C_COMPILER"
          echo "::set-output name=CXX_COMPILER::$CXX_COMPILER"
          echo "::set-output name=FINAL_BASE_IMAGE::$FINAL_BASE_IMAGE"
          echo "::set-output name=FINAL_BASE_IMAGE_TAG::$FINAL_BASE_IMAGE_TAG"
          echo "::set-output name=BUILD_BASE_IMAGE::$BUILD_BASE_IMAGE"
          echo "::set-output name=TEST_BASE_IMAGE::$TEST_BASE_IMAGE"
          echo "::set-output name=FINAL_BASE_IMAGE_DIGEST::$FINAL_BASE_IMAGE_DIGEST"
          echo "::set-output name=GIT_HASH::$GIT_HASH"
          echo "::set-output name=GIT_SHORT_HASH::$GIT_SHORT_HASH"
          echo "::set-output name=CREATION_DATE::$CREATION_DATE"
          echo "::set-output name=GIT_TAG::$GIT_TAG"
          echo "::set-output name=VERSION::$VERSION"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }},ghcr.io/${{ github.repository }}
          flavor: |
            latest=true
          tags: |
            type=semver,priority=1000,pattern={{version}}
            type=sha,priority=900
            type=raw,value=stable,priority=800,enable=${{ !startsWith(github.ref, 'refs/tags/v') }}
            type=ref,priority=700,event=branch
            type=ref,priority=600,event=pr

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        # if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image and push to registries
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            VERSION=${{ steps.build-args.outputs.VERSION }}
